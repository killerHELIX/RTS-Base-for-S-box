@using Sandbox;
@using Sandbox.UI;
@using System.Linq;
@using System;
@inherits PanelComponent
@attribute [StyleSheet]

@code
{
	private class MenuPanelData
	{
		public string textColor = "white";
		public MainMenuComponent.MenuPanelType panelType = MainMenuComponent.MenuPanelType.NULL;

		public MenuPanelData(string newColor, MainMenuComponent.MenuPanelType newPanelType)
		{
			textColor = newColor;
			panelType = newPanelType;
		}
	}

	private Dictionary<string, MenuPanelData> menuItems = new Dictionary<string, MenuPanelData>();

	protected override void OnStart()
	{
		menuItems.Add("Quit", new MenuPanelData("white", MainMenuComponent.MenuPanelType.NULL));
		menuItems.Add("Settings", new MenuPanelData("white", MainMenuComponent.MenuPanelType.SETTINGS));
		menuItems.Add("Join", new MenuPanelData("white", MainMenuComponent.MenuPanelType.LOBBYLIST));
		menuItems.Add("Host", new MenuPanelData("white", MainMenuComponent.MenuPanelType.JOINEDLOBBY));
		Panel.PlaySound("sounds/enterthevaccuum.sound");
	}
	//Game.ActiveScene.LoadFromFile( "scenes/tests/menu.scene" );
	//
	// Create a lobby if we're not connected
	//
	//if ( !GameNetworkSystem.IsActive )
	//{
	//GameNetworkSystem.CreateLobby();
	//}
	//list = await GameNetworkSystem.QueryLobbies();
	//GameNetworkSystem.Connect( lobbyid );

	void isHoveredColor(string hoveredItem)
	{

		Log.Info("Mouse Enter");
		menuItems[hoveredItem].textColor = "darkorange";
	}

	void isNotHoveredColor(string hoveredItem)
	{
		Log.Info("Mouse Exit");
		menuItems[hoveredItem].textColor = "white";
	}

	void itemClicked(string clickedItem)
	{
		Log.Info("You have clicked " + clickedItem);
		foreach(string itemName in menuItems.Keys)
		{
			menuItems[itemName].textColor = "white";
		}
		MainMenuComponent.Local.setActivePanel(menuItems[clickedItem].panelType);
		return;
	}

	void itemPressed(string clickedItem)
	{
		menuItems[clickedItem].textColor = "yellow";
	}

	void itemPressReleased(string clickedItem)
	{
		menuItems[clickedItem].textColor = "darkorange";
	}

	//public MainMenuComponent.MenuPanelType getPanelTypeFromButtonText(string buttonText)
	//{
	//	switch(buttonText)
	//	{
	//		case "Settings"
	//	}
	//}
	//@onclickreleased"@(() => itemClickReleased(itemName))"

}

<root>
	<div class="OptionsPanel">
		@foreach (string itemName in menuItems.Keys)
			{
			<button @onmouseover="@(() => isHoveredColor(itemName))" @onmouseout="@(() => isNotHoveredColor(itemName))" @onclick="@(() => itemClicked(itemName))" @onmousedown="@(()=> itemPressed(itemName))" @onmouseup="@(() => itemPressReleased(itemName))" style="color: @(menuItems[itemName].textColor)" class="MenuOption">@(itemName)</button>
			}
	</div>
</root>